from django.contrib.auth import authenticate, login, logout
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.permissions import IsAdminUser, AllowAny, IsAuthenticated
from django.shortcuts import get_object_or_404
from .models import Empleado, ObraSocial
from databaseManager.serializer import *
<<<<<<< HEAD
"""
Django settings for home project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7t(^whe5hz!n$*wsc=pn3$ay4gad_5iuo$hiw&*%rr@cv1#ll('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authentication',
    'ABM_ISPC',
    'databaseManager',
    'corsheaders',
    'rest_auth',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ORIGIN_WHITELIST = ["http://localhost:4200"]
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'ABM_ISPC.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ABM_ISPC.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


# Acá configuran ustedes para conectarse a mysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ecommercekillcodeproject',
        'USER': 'root',
        'PASSWORD': 'killcoders10',
        'HOST': '127.0.0.1',
        'PORT': '3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS_ALLOW_CREDENTIALS = True
# SESSION_COOKIE_SAMESITE = 'None'
# SESSION_COOKIE_SECURE = True
# SESSION_COOKIE_NAME = 'sessionid'
# SESSION_COOKIE_DOMAIN = 'http://localhost:4200/'

AUTH_USER_MODEL = 'databaseManager.CustomUser'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.IsAdminUser',
    ]
}# Create your views here.
=======
from django.http import JsonResponse
# Create your views here.
>>>>>>> main

class LoginView(APIView):
    permission_classes = [AllowAny]
    def post(self, request):
        # Recuperamos las credenciales y autenticamos al usuario
        email = request.data.get('email', None)
        password = request.data.get('password', None)
        user = authenticate(request, email=email, password=password)

        # Si es correcto añadimos a la request la informacion de sesion
        if user:
            login(request, user)
            return Response(
                 UserSerializer(user).data, 
                 status=status.HTTP_200_OK)
        
        # Si no es correcto devolvemos un error en la peticion
        return Response(status=status.HTTP_404_NOT_FOUND)
    
class LogoutView(APIView):
    permission_classes = [AllowAny]
    def post(self, request):
        # Borramos de la rquest la informacion de sesion
        logout(request)
        # Crear una respuesta vacía
        response = JsonResponse({}, status=status.HTTP_200_OK)
        #Devolvemos la respuesta al cliente
        return response
    
class SignupView(generics.CreateAPIView):
    serializer_class = UserSerializer



class CrearEmpleadoView(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request):
        serializer = CrearEmpleadoSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"mensaje": "Empleado creado exitosamente"})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
class ListarEmpleadosView(APIView):
    permission_classes = [IsAuthenticated]
    def get(self, request):
        empleados = Empleado.objects.all()
        serializer = ListarEmpleadoSerializer(empleados, many=True)
        return Response(serializer.data)
    
class ModificarEmpleadoView(APIView):
    permission_classes = [IsAuthenticated]

    def put(self, request, legajo):
        empleado = Empleado.objects.get(legajo=legajo)
        serializer = ModificarEmpleadoSerializer(empleado, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"mensaje": "Empleado modificado exitosamente"})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
class EliminarEmpleadoView(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request, legajo):
        empleado = Empleado.objects.get(legajo=legajo)
        empleado.delete()
        return Response({"mensaje": "Empleado eliminado exitosamente"})
    
class CrearReciboView(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request):
        serializer = CrearReciboSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"mensaje": "Recibo creado exitosamente"})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class ListarReciboView(APIView):
    permission_classes = [IsAuthenticated]
    def get(self, request):
        recibos = Recibo.objects.all()
        serializer = ListarReciboSerializer(recibos, many=True)
        return Response(serializer.data)
    
class ModificarReciboView(APIView):
    permission_classes = [IsAuthenticated]

    def put(self, request, id_recibo):
        recibo = Recibo.objects.get(id_recibo=id_recibo)
        serializer = ModificarReciboSerializer(recibo, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"mensaje": "Recibo modificado exitosamente"})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
class EliminarReciboView(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request, id_recibo):
        recibo = Recibo.objects.get(id_recibo=id_recibo)
        serializer = EliminarReciboSerializer(recibo)
        recibo.delete()
        return Response({"mensaje": "Recibo eliminado exitosamente"})

class CrearReclamoView(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request):
        serializer = CrearReclamoSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"mensaje": "Reclamo creado exitosamente"})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
class ListarReclamoView(APIView):
    permission_classes = [IsAuthenticated]
    def get(self, request):
        reclamos = Reclamo.objects.all()
        serializer = ListarReclamoSerializer(reclamos, many=True)
        return Response(serializer.data)
    
class ModificarReclamoView(APIView):
    permission_classes = [IsAuthenticated]

    def put(self, request, id_recla):
        reclamo = Reclamo.objects.get(id_recla=id_recla)
        serializer = ModificarReclamoSerializer(reclamo, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"mensaje": "Reclamo modificado exitosamente"})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
class EliminarReclamoView(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request, id_recla):
        reclamo = Empleado.objects.get(id_recla=id_recla)
        serializer = EliminarReclamoSerializer(reclamo)
        reclamo.delete()
        return Response({"mensaje": "Reclamo eliminado exitosamente"})